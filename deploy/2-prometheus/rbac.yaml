#@ load("@ytt:data", "data")
#@ load("/1-libs/metadata.lib.yaml", "metadata")
#@ load("/1-libs/labels.lib.yaml", "labels")
---
apiVersion: v1
kind: ServiceAccount
metadata: #@ metadata(data.values.prometheusInstance, app=data.values.prometheusName, ins=data.values.prometheusInstance, comp=data.values.prometheusComponent, ns=data.values.namespace, ver=data.values.prometheusVersion)
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleList
items:
  #@ for namespace in ["default", "kube-system", data.values.namespace]:
- apiVersion: rbac.authorization.k8s.io/v1
  kind: Role
  metadata: #@ metadata(data.values.prometheusInstance, app=data.values.prometheusName, comp=data.values.prometheusComponent, ins=data.values.prometheusInstance, ns=data.values.namespace, ver=data.values.prometheusVersion)
  rules:
  - apiGroups:
    - ""
    resources:
    - services
    - endpoints
    - pods
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - extensions
    resources:
    - ingresses
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - networking.k8s.io
    resources:
    - ingresses
    verbs:
    - get
    - list
    - watch
#@ end
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata: #@ metadata(data.values.prometheusInstance +"-config", app=data.values.prometheusName, ins=data.values.prometheusInstance, comp=data.values.prometheusComponent, ns=data.values.namespace, ver=data.values.prometheusVersion)
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBindingList
items:
#@ for namespace in ["default", "kube-system", data.values.namespace]:
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata: #@ metadata(data.values.prometheusInstance, app=data.values.prometheusName, ins=data.values.prometheusInstance, comp=data.values.prometheusComponent, ns=data.values.namespace, ver=data.values.prometheusVersion)
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: #@ data.values.prometheusInstance
  subjects:
  - kind: ServiceAccount
    name: #@ data.values.prometheusSA
    namespace: #@ data.values.namespace
#@ end
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata: #@ metadata(data.values.prometheusInstance +"-config", app=data.values.prometheusName, ins=data.values.prometheusInstance, comp=data.values.prometheusComponent, ns=data.values.namespace, ver=data.values.prometheusVersion)
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: #@ data.values.prometheusInstance +"-config"
subjects:
- kind: ServiceAccount
  name: #@ data.values.prometheusSA
  namespace: #@ data.values.namespace
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata: #@ metadata(data.values.prometheusInstance, app=data.values.prometheusName, ins=data.values.prometheusInstance, comp=data.values.prometheusComponent, ns=data.values.namespace, ver=data.values.prometheusVersion)
rules:
- apiGroups:
  - ""
  resources:
  - nodes/metrics
  verbs:
  - get
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata: #@ metadata(data.values.prometheusInstance, app=data.values.prometheusName, ins=data.values.prometheusInstance, comp=data.values.prometheusComponent, ns=data.values.namespace, ver=data.values.prometheusVersion)
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: #@ data.values.prometheusInstance
subjects:
- kind: ServiceAccount
  name: #@ data.values.prometheusInstance
  namespace: #@ data.values.namespace
