#@ load("@ytt:data", "data")
#@ load("/1-libs/metadata.lib.yaml", "metadata")
#@ load("/1-libs/labels.lib.yaml", "labels")
---
apiVersion: apps/v1
kind: Deployment
metadata: #@ metadata(data.values.promAdapterName, app=data.values.promAdapterName, comp=data.values.promAdapterComponent, ns=data.values.namespace, ver=data.values.promAdapterVersion)
spec:
  replicas: 2
  selector:
    matchLabels: #@ labels(data.values.promAdapterName, data.values.promAdapterComponent)
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels: #@ labels(data.values.promAdapterName, data.values.promAdapterComponent, ver=data.values.promAdapterVersion)
    spec:
      containers:
      - args:
        - --cert-dir=/var/run/serving-cert
        - --config=/etc/adapter/config.yaml
        - --logtostderr=true
        - --metrics-relist-interval=1m
        - --prometheus-url=http://prometheus-k8s.monitoring.svc:9090/
        - --secure-port=6443
        - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
        image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.1
        name: prometheus-adapter
        ports:
        - containerPort: 6443
        resources:
          limits:
            cpu: 250m
            memory: 180Mi
          requests:
            cpu: 102m
            memory: 180Mi
        volumeMounts:
        - mountPath: /tmp
          name: tmpfs
          readOnly: false
        - mountPath: /var/run/serving-cert
          name: volume-serving-cert
          readOnly: false
        - mountPath: /etc/adapter
          name: config
          readOnly: false
      nodeSelector:
        kubernetes.io/os: linux
      serviceAccountName: prometheus-adapter
      volumes:
      - emptyDir: {}
        name: tmpfs
      - emptyDir: {}
        name: volume-serving-cert
      - configMap:
          name: adapter-config
        name: config
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata: #@ metadata(data.values.promAdapterName, app=data.values.promAdapterName, comp=data.values.promAdapterComponent, ns=data.values.namespace, ver=data.values.promAdapterVersion)
spec:
  minAvailable: 1
  selector:
    matchLabels: #@ labels(data.values.promAdapterName, data.values.promAdapterComponent, ver=data.values.promAdapterVersion)
